package report1;

import calc.Calc;

public class Ex2 {

	public static void main(String[] args) {
		// TODO 自動生成されたメソッド・スタブ


		//double [][] A = {{1,1,0},{1,2,0},{0,0,1}};
		//double[][] A = {{4,3,2,1},{3,3,2,1},{2,2,2,1},{1,1,1,1}};
//		double[][] A = {
//				{0.81321, -0.00013 ,0.00014 ,0.00011, 0.00021},
//				{-0.00013, 0.93125 ,0.23567, 0.41235 ,0.41632},
//				{0.00014, 0.23567, 0.18765 ,0.50632 ,0.30697},
//				{0.00011 ,0.41235 ,0.50632, 0.27605, 0.46322},
//				{0.00021, 0.41632, 0.30697 ,0.46322  ,0.46322 } };
//		double [][] A =
//			   {{6.00 ,-1.00, 0.00 ,-1.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00, 0.00 ,0.00},
//				{-1.00, 6.00 ,-1.00 ,0.00, -1.00 ,0.00 ,0.00, 0.00 ,0.00 ,0.00, 0.00, 0.00},
//				{0.00 ,-1.00, 6.00, -1.00 ,0.00, -1.00 ,0.00 ,0.00, 0.00, 0.00, 0.00 ,0.00},
//				{-1.00 ,0.00, -1.00, 6.00, -1.00, 0.00,-1.00 ,0.00, 0.00 ,0.00 ,0.00 ,0.00},
//				{0.00, -1.00, 0.00 ,-1.00 ,6.00 ,-1.00, 0.00 ,-1.00 ,0.00, 0.00, 0.00 ,0.00},
//				{0.00, 0.00,-1.00, 0.00 ,-1.00, 6.00, -1.00 ,0.00 ,-1.00, 0.00 ,0.00 ,0.00},
//				{0.00 ,0.00 ,0.00, -1.00 ,0.00 ,-1.00, 6.00, -1.00, 0.00, -1.00, 0.00 ,0.00},
//				{0.00 ,0.00 ,0.00 ,0.00 ,-1.00 ,0.00 ,-1.00 ,6.00, -1.00, 0.00, -1.00, 0.00},
//				{0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,-1.00 ,0.00 ,-1.00, 6.00, -1.00 ,0.00 ,-1.00},
//				{0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,-1.00 ,0.00 ,-1.00 ,6.00 ,-1.00 ,0.00},
//				{0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,-1.00 ,0.00 ,-1.00 ,6.00 ,-1.00},
//				{0.00 ,0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 ,-1.00 ,0.00 ,-1.00 ,6.00}};
		double[][]A = {{4,-1,-1,0},{-1,4,0,-1},{-1,0,4,-1},{0,-1,-1,4}};
		Calc.printMat(A);
		double [] x = new double [4];
		for(int i=0;i<x.length;i++){
			x[i] = 1;
		}
		double [] b = new double [5];
//		for(int i=0;i<A.length;i++){
//			for(int j=0;j<A.length;j++){
//				if(i == j){
//					A[i][j] = i + 1 ;
//				}else if(i < j){
//					A[i][j] = 20 - j;
//				}else{
//					A[i][j] = 20 - i;
//				}
//			}
//		}
		Calc.printMat(A);
	   b = Calc.matVec(A, x);
	   for(int i=0;i<x.length;i++){
			x[i] = 20;
		}
	   double[][]M_1 =Pre_CG.Jacobi_pre(A);
	   double [][]M_2 = Pre_CG.SSOR_pre(A);
	   double[][]M_3 = Pre_CG.IncCholesky_pre(A);
	   double[]x_1 = Calc.copyVec(x);
	   double[]x_2 = Calc.copyVec(x);
	   double[]x_3 = Calc.copyVec(x);
	   double[]b_1 = Calc.copyVec(b);
	   double[]b_2 = Calc.copyVec(b);
	   double[]b_3 = Calc.copyVec(b);

	   Calc.printVec(CG.CG_pre_alg(x_1, b_1, A, M_1));
	   Calc.printVec(CG.CG_pre_alg(x_2, b_2, A, M_2));
	   Calc.printVec(CG.CG_pre_alg(x_3, b_3, A, M_3));





	}

}
